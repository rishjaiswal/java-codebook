Introduction - Doubly Linked List : 

1. The doubly linked list works in a similar way but has one more reference field which is known as the "prev" field. 
With this extra field, you are able to know the previous node of the current node.

class DoublyListNode {
    int val;
    DoublyListNode next, prev;
    DoublyListNode(int x) {val = x;}
}


Operations : 
Similar to a singly linked list, we will introduce how to access data, insert a new node or delete an existing node in a doubly linked list.

Access :  We can access data in the same exact way as in a singly linked list:

We are not able to access a random position in constant time.
We have to traverse from the head to get the i-th node we want.
The time complexity in the worse case will be O(N), where N is the length of the linked list.

Add : If we want to insert a new node cur after an existing node prev, we can divide this process into two steps:

a. link cur with prev and next, where next is the original next node of prev;
b. re-link the prev and next with cur. 

Delete : If we want to delete an existing node cur from the doubly linked list, 
we can simply link its previous node prev with its next node next.

Since we no longer need to traverse the linked list to get the previous node, both the time and space complexity are O(1)

NOTE:
Unlike the singly linked list, it is easy to get the previous node in constant time with the "prev" field.

